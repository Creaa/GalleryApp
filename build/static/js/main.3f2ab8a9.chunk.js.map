{"version":3,"sources":["../task/src/App.js","../task/src/serviceWorker.js","../task/src/index.js"],"names":["App","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","componentDidMount","fetchData","componentDidUpdate","state","fetch","concat","page","numberOfPhotos","method","headers","Content-Type","then","res","json","data","imagesToJoin","forEach","el","push","setState","fade","imagesToShow","imgClickHandler","e","clickedPhotoUrl","target","getAttribute","photoToShow","clickedPhotoThumb","photoHoverHandler","photoHoverOutHandler","nextPage","prevPage","_this2","react_default","a","createElement","className","map","k","key","style","animation","onClick","thumb","thumbnailUrl","url","background","title","src","onMouseLeave","onMouseOver","alt","Component","Boolean","window","location","hostname","match","ReactDOM","render","src_App_0","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.3f2ab8a9.chunk.js","sourcesContent":["import React, { Component } from 'react';\nimport './App.css';\n\nclass App extends Component {\n  constructor() {\n    super()\n    this.state = {\n      numberOfPhotos: 12,\n      fade: \"FadeIn 2s forwards\",\n      page: 0,\n      imagesToShow: [],\n      fetchData: true // To avoid infinite loop\n    }\n  }\n  componentDidMount = () => {\n    this.fetchData()\n  }\n  componentDidUpdate = () => {\n    this.fetchData()\n  }\n  fetchData = () => {\n    if (this.state.fetchData) {\n      fetch(`https://jsonplaceholder.typicode.com/photos?_start=${this.state.page * this.state.numberOfPhotos}&_limit=${this.state.numberOfPhotos}`, {\n        method: 'GET',\n        headers: { 'Content-Type': 'application/json' },\n      })\n        .then((res) => res.json())\n        .then((data) => {\n          let imagesToJoin = []; // temporary variable to save objects without state's changing\n          data.forEach((el) => {\n            imagesToJoin.push(el)\n          })\n          this.setState({\n            fade: \"FadeIn 2s forwards\",\n            imagesToShow: imagesToJoin,\n            fetchData: false\n          })\n        })\n    }\n  }\n  imgClickHandler = (e) => {\n    this.setState({\n      clickedPhotoUrl: e.target.getAttribute('url'),\n      photoToShow: e.target.getAttribute('thumb'),\n      clickedPhotoThumb: e.target.getAttribute('thumb')\n    })\n  }\n  photoHoverHandler = () => {\n    this.setState({\n      photoToShow: this.state.clickedPhotoUrl\n    })\n  }\n\n  photoHoverOutHandler = () => {\n    this.setState({\n      photoToShow: this.state.clickedPhotoThumb\n    })\n  }\n\n  nextPage = () => {\n    this.setState({\n      fade: \"FadeOut 1s forwards\",\n      page: this.state.page + 1,\n      fetchData: true,\n    })\n  }\n\n  prevPage = () => {\n    if (this.state.page > 0) {\n      this.setState({\n        fade: \"FadeOut 1s forwards\",\n        page: this.state.page - 1,\n        fetchData: true,\n      })\n    }\n    else return false;\n  }\n  render() {\n    return (\n      <div className=\"App\">\n        <div className=\"wrapper\">\n          <div className=\"first-column\">\n            <h1 className=\"gallery-title\">My Gallery!</h1>\n            <ul className=\"gallery-list\">\n              {this.state.imagesToShow.map((el, k) => {\n                return <li\n                  className=\"gallery-element\"\n                  key={k}\n                  style={{ animation: `${this.state.fade}` }}\n                >\n                  <a className=\"gallery-link\"\n                    onClick={this.imgClickHandler}\n                    thumb={el.thumbnailUrl}\n                    url={el.url}\n                    style={{\n                      background: `url(${el.url}) center/cover`\n                    }}>\n                  </a>\n                  <p className=\"photo-title\">{el.title}</p>\n                </li>\n              })}\n            </ul>\n            <div className=\"pagination\">\n              <span onClick={this.prevPage} className=\"pageArrow\">&lt;</span>\n              <p className=\"numberOfPage\">{this.state.page + 1}</p>\n              <span onClick={this.nextPage} className=\"pageArrow\">&gt;</span>\n            </div>\n          </div>\n          <div className=\"second-column\">\n            <img src={this.state.photoToShow} onMouseLeave={this.photoHoverOutHandler} onMouseOver={this.photoHoverHandler} alt=\"\" className=\"view-photo\" />\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}